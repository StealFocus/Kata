<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="SolutionBuild">

  <!-- 
    IMPORTANT - please do not customise this .targets file. Modifications will affect all Solutions using the software 
    factory and maybe overridden by future updates to the software factory. Customise your build process by editing 
    the *.targets/*.proj files in your solution.
  -->

  <Import Project="MicrosoftSdcTasks\Microsoft.Sdc.Common.tasks"/>

  <PropertyGroup Condition=" '$(IsDeploymentBuild)'=='true' ">
    <DeployDependsOn>
      BeforeDeployCustom;
      CoreDeploy;
      AfterDeployCustom
    </DeployDependsOn>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsInitialiseEnvironmentBuild)'=='true' ">
    <InitialiseEnvironmentDependsOn>
      BeforeInitialiseEnvironmentCustom;
      CoreInitialiseEnvironment;
      AfterInitialiseEnvironmentCustom
    </InitialiseEnvironmentDependsOn>
  </PropertyGroup>
  
  <PropertyGroup>
    <InitialiseBuildDependsOn>
      BeforeInitialiseBuildCustom;
      CoreInitialiseBuild;
      AfterInitialiseBuildCustom
    </InitialiseBuildDependsOn>
    <DatabaseBuildDependsOn>
      BeforeDatabaseBuildCustom;
      CoreDatabaseBuild;
      AfterDatabaseBuildCustom
    </DatabaseBuildDependsOn>
    <SolutionCompileDependsOn>
      BeforeSolutionCompileCustom;
      CoreSolutionCompile;
      AfterSolutionCompileCustom
    </SolutionCompileDependsOn>
    <RunTestsDependsOn>
      BeforeRunTestsCustom;
      CoreRunTests;
      AfterRunTestsCustom
    </RunTestsDependsOn>
    <BuildDocumentationDependsOn>
      BeforeBuildDocumentationCustom;
      CoreBuildDocumentation;
      AfterBuildDocumentationCustom
    </BuildDocumentationDependsOn>
    <PackageDependsOn>
      BeforePackageCustom;
      CorePackage;
      AfterPackageCustom
    </PackageDependsOn>
    <SolutionBuildDependsOn>
      $(InitialiseBuildDependsOn);
      $(InitialiseEnvironmentDependsOn);
      $(DatabaseBuildDependsOn);
      $(SolutionCompileDependsOn);
      $(RunTestsDependsOn);
      $(BuildDocumentationDependsOn);
      $(PackageDependsOn);
      $(DeployDependsOn)
    </SolutionBuildDependsOn>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(BuildDir)' == '' ">
    <BuildDir>..\..\Build</BuildDir>
  </PropertyGroup>

  <Target Name="BeforeCoreInitialiseBuild">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreInitialiseBuild">
    <Message
      Importance="high"
      Text="Initialising Build." />
    <!-- Delete any old Build directory. -->
    <Message
      Condition=" Exists('$(BuildDir)') " 
      Importance="high"
      Text="Deleting old Build directory." />
    <RemoveDir
      Condition=" Exists('$(BuildDir)') "
      Directories="$(BuildDir)" />
    <!-- Delete any old test results. -->
    <PropertyGroup>
      <TestResultsFolderPath>..\TestResults</TestResultsFolderPath>
    </PropertyGroup>
    <Message
      Condition=" Exists('$(TestResultsFolderPath)') "
      Importance="high"
      Text="Deleting old test results." />
    <RemoveDir
      Condition=" Exists('$(TestResultsFolderPath)') "
      Directories="$(TestResultsFolderPath)" />
  </Target>

  <Target Name="AfterCoreInitialiseBuild">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="DeleteAppPool">
    <Microsoft.Sdc.Tasks.Web.AppPool.Exists
      AppPoolName="$(AppPoolName)">
      <Output
        TaskParameter="DoesExist"
        PropertyName="AppPoolExists"/>
    </Microsoft.Sdc.Tasks.Web.AppPool.Exists>
    <MSBuild.ExtensionPack.Web.Iis6AppPool
      TaskAction="Delete" 
      Name="$(AppPoolName)" />
  </Target>

  <Target Name="SetupScriptMaps">
    <WebDirectoryScriptMap
      Condition=" '%(WebApplicationScriptMap.Identity)'!='' "
      Extension="%(WebApplicationScriptMap.Identity)"
      MapToAspNet="%(WebApplicationScriptMap.MapToAspNet)"
      Verbs="%(WebApplicationScriptMap.Verbs)"
      VerifyFileExists="%(WebApplicationScriptMap.VerifyFileExists)"
      VirtualDirectoryName="$(VirtualDirectoryName)" />
  </Target>

  <!-- TO DO: Does this work on Windows 2008? -->
  <Target Name="SetupIis">
    <Message
      Importance="high"
      Text="Setting up IIS." />
    <!-- Delete Virtual Directories. -->
    <Message
      Importance="high"
      Text="Deleting the following Virtual Directories:" />
    <Message
      Condition=" '%(WebApplicationProject.Identity)'!='' "
      Importance="high"
      Text="- %(WebApplicationProject.Identity)" />
    <Message
      Condition=" '%(WebApplicationProject.Identity)'=='' "
      Importance="high"
      Text="- (None configured)" />
    <Microsoft.Sdc.Tasks.Web.WebSite.DeleteVirtualDirectory
      Condition=" '%(WebApplicationProject.Identity)'!='' "
      VirtualDirectoryName="%(WebApplicationProject.Identity)"
      WebSiteName="%(WebApplicationProject.WebSiteName)" />
    <!-- Delete AppPools.  -->
    <Message
      Importance="high"
      Text="Deleting the following AppPools:" />
    <Message
      Condition=" '%(WebApplicationProject.Identity)'!='' "
      Importance="high"
      Text="- %(WebApplicationProject.Identity)" />
    <Message
      Condition=" '%(WebApplicationProject.Identity)'=='' "
      Importance="high"
      Text="- (None configured)" />
    <MSBuild
      Condition=" '%(WebApplicationProject.Identity)'!='' "
      Projects="$(MSBuildProjectFile)"
      Targets="DeleteAppPool"
      Properties="AppPoolName=%(WebApplicationProject.Identity)" />
    <!-- Add AppPool Service Accounts to Local Groups.  -->
    <Message
      Importance="high"
      Text="Adding the following AppPool Service Accounts to the required Local Groups:" />
    <Message
      Condition=" '%(WebApplicationProject.AppPoolUsername)'!='' "
      Importance="high"
      Text="- '%(WebApplicationProject.AppPoolUserDomain)\%(WebApplicationProject.AppPoolUsername)'." />
    <Message
      Condition=" '%(WebApplicationProject.Identity)'=='' "
      Importance="high"
      Text="- (None configured)" />
    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="CheckGroupExists" User="IIS_IUSRS">
      <Output TaskParameter="Exists" PropertyName="IisIusersWpgExists"/>
    </MSBuild.ExtensionPack.Computer.ActiveDirectory>
    <ActiveDirectory.Group.AddUser
      Condition=" '%(WebApplicationProject.AppPoolUsername)'!='' And '$(IisIusersWpgExists)'=='True' "
      UserName="%(WebApplicationProject.AppPoolUsername)"
      UserDomain="%(WebApplicationProject.AppPoolUserDomain)"
      GroupName="IIS_IUSRS"
      EnsureUserIsInGroup="true" />
    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="CheckGroupExists" User="IIS_WPG">
      <Output TaskParameter="Exists" PropertyName="IisWpgExists"/>
    </MSBuild.ExtensionPack.Computer.ActiveDirectory>
    <ActiveDirectory.Group.AddUser
      Condition=" '%(WebApplicationProject.AppPoolUsername)'!='' And '$(IisWpgExists)'=='True' "
      UserName="%(WebApplicationProject.AppPoolUsername)"
      UserDomain="%(WebApplicationProject.AppPoolUserDomain)"
      GroupName="IIS_WPG"
      EnsureUserIsInGroup="true" />
    <!-- Create AppPools. -->
    <Message
      Importance="high"
      Text="Creating the following AppPools:" />
    <Message
      Condition=" '%(WebApplicationProject.Identity)'!='' And '%(WebApplicationProject.IdentityType)'!='SpecifiedUserAccount' "
      Importance="high"
      Text="- %(WebApplicationProject.Identity) (%(WebApplicationProject.IdentityType))" />
    <Message
      Condition=" '%(WebApplicationProject.Identity)'!='' And '%(WebApplicationProject.AppPoolUserDomain)'!='' "
      Importance="high"
      Text="- %(WebApplicationProject.Identity) (%(WebApplicationProject.AppPoolUserDomain)\%(WebApplicationProject.AppPoolUsername))" />
    <Message
      Condition=" '%(WebApplicationProject.Identity)'=='' "
      Importance="high"
      Text="- (None configured)" />
    <Microsoft.Sdc.Tasks.Web.AppPool.Create
      Condition=" '%(WebApplicationProject.Identity)'!='' "
      AppPoolName="%(WebApplicationProject.Identity)"
      IdentityType="%(WebApplicationProject.IdentityType)"
      Identity="%(WebApplicationProject.AppPoolUsername)"
      Password="%(WebApplicationProject.AppPoolPassword)" />
    <!-- Create Virtual Directories. -->
    <Message
      Importance="high"
      Text="Creating the following Virtual Directories:" />
    <Message
      Condition=" '%(WebApplicationProject.Identity)'!='' "
      Importance="high"
      Text="- %(WebApplicationProject.Identity)" />
    <Message
      Condition=" '%(WebApplicationProject.Identity)'=='' "
      Importance="high"
      Text="- (None configured)" />
    <Microsoft.Sdc.Tasks.Web.WebSite.CreateVirtualDirectory
      Condition=" '%(WebApplicationProject.Identity)'!='' "
      AppCreate="true"
      AppPoolID="%(WebApplicationProject.Identity)"
      AuthFlags="%(WebApplicationProject.AuthFlags)"
      Path="%(WebApplicationProject.ProjectDir)"
      VirtualDirectoryName="%(WebApplicationProject.Identity)"
      WebAppName="%(WebApplicationProject.Identity)"
      WebSiteName="%(WebApplicationProject.WebSiteName)" />
    <!-- Register ASP.NET version. -->
    <!-- TO DO: Sort these paths out, NB different runtimes. -->
    <PropertyGroup Condition=" '$(Is32bit)'=='true' ">
      <AspNetRegIisPath>%systemdrive%\WINDOWS\Microsoft.NET\Framework\v2.0.50727\aspnet_regiis.exe</AspNetRegIisPath>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Is64bit)'=='true' ">
      <AspNetRegIisPath>%systemdrive%\WINDOWS\Microsoft.NET\Framework64\v2.0.50727\aspnet_regiis.exe</AspNetRegIisPath>
    </PropertyGroup>
    <Message
      Importance="high"
      Text="Registering correct ASP.NET version for Virtual Directories." />
    <Exec
      Condition=" '%(WebApplicationProject.Identity)'!='' "
      Command='"$(AspNetRegIisPath)" -s W3SVC/1/ROOT/%(WebApplicationProject.Identity)' />
    <!-- SetupScriptMaps -->
    <Message
      Importance="high"
      Text="Registering additional script maps (for all Virtual Directories related to this solution):" />
    <Message
      Condition=" '%(WebApplicationScriptMap.Identity)'!='' "
      Importance="high"
      Text="- %(WebApplicationScriptMap.Identity)" />
    <Message
      Condition=" '%(WebApplicationScriptMap.Identity)'=='' "
      Importance="high"
      Text="- (None configured)" />
    <MSBuild
      Condition=" '%(WebApplicationProject.Identity)'!='' "
      Projects="$(MSBuildProjectFile)"
      Targets="SetupScriptMaps"
      Properties="VirtualDirectoryName=%(WebApplicationProject.Identity)" />
  </Target>

  <Target Name="BeforeInitialiseBuildCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreInitialiseEnvironment" DependsOnTargets="SetupIis">
    <Message
      Importance="high"
      Text="Initialising environment." />
    <!-- 
      These MakeDir steps are here to ensure the directories are created. This will not exist if you don't 
      have the C++ components of Visual Studio installed which can cause problems with MSBuild in some 
      situations. The easiest solution is to create it here if it does not exist.
    -->
    <!-- TO DO: Sort out for 64-bit -->
    <PropertyGroup>
      <SixPointZeroSdkLibPath>$(SYSTEMDRIVE)\Program Files\Microsoft SDKs\Windows\v6.0A\Lib</SixPointZeroSdkLibPath>
      <SixPointOneSdkLibPath>$(SYSTEMDRIVE)\Program Files\Microsoft SDKs\Windows\v6.1\Lib</SixPointOneSdkLibPath>
    </PropertyGroup>
    <MakeDir
      Condition=" !Exists('$(SixPointZeroSdkLibPath)') "
      Directories="$(SixPointZeroSdkLibPath)" />
    <MakeDir
      Condition=" !Exists('$(SixPointOneSdkLibPath)') "
      Directories="$(SixPointOneSdkLibPath)" />
    <!-- 
      Add Strong Name Verification Skipping entry.
    -->
    <PropertyGroup>
      <SixPointZeroSdkBinPath>$(SYSTEMDRIVE)\Program Files\Microsoft SDKs\Windows\v6.0A\Bin</SixPointZeroSdkBinPath>
      <SixPointOneSdkBinPath>$(SYSTEMDRIVE)\Program Files\Microsoft SDKs\Windows\v6.1\Bin</SixPointOneSdkBinPath>
    </PropertyGroup>
    <Message
      Importance="high"
      Text="Adding Strong Name Verification Skipping Entry for Public Key Token '$(StrongNamePublicKeyToken)' against .NET Runtime $(RuntimeVersion)." />
    <Message
      Importance="high" 
      Text="For 32-bit processes." />
    <Exec
      Condition=" Exists('$(SixPointOneSdkBinPath)') "
      Command='"$(SixPointOneSdkBinPath)\sn.exe" -Vr *,$(StrongNamePublicKeyToken)'  />
    <Exec
      Condition=" Exists('$(SixPointZeroSdkBinPath)') And !Exists('$(SixPointOneSdkBinPath)') "
      Command='"$(SixPointZeroSdkBinPath)\sn.exe" -Vr *,$(StrongNamePublicKeyToken)'  />
    <Message 
      Condition=" '$(Is64bit)'=='true' "
      Importance="high"
      Text="For 64-bit processes." />
    <Exec
      Condition=" '$(Is64bit)'=='true' And Exists('$(SixPointOneSdkBinPath)') "
      Command='"$(SixPointOneSdkBinPath)\x64\sn.exe" -Vr *,$(StrongNamePublicKeyToken)'  />
    <Exec
      Condition=" '$(Is64bit)'=='true' And Exists('$(SixPointZeroSdkBinPath)') And !Exists('$(SixPointOneSdkBinPath)') "
      Command='"$(SixPointZeroSdkBinPath)\x64\sn.exe" -Vr *,$(StrongNamePublicKeyToken)'  />
    <!--
      Perform IIS Reset so that the Strong Name verification skipping entry is picked up.
    -->
    <Message
      Condition=" '$(IsDesktopBuild)'=='true' "
      Importance="high"
      Text="Performing IIS Reset so that the Strong Name verification skipping entry is picked up by IIS. Note that this operation is only performed for local builds, the build server uses fully signed assemblies so no IIS Reset required on build server." />
    <Exec
      Condition=" '$(IsDesktopBuild)'=='true' "
      Command="iisreset" />
    <!-- 
      Create Event Log source(s). 
    -->
    <Message
      Importance="high"
      Text="Setting up the following Event Log sources:" />
    <Message
      Condition=" '%(EventLogSource.Identity)'!='' "
      Importance="high"
      Text="- $(EventLogName)\%(EventLogSource.Identity)" />
    <Message
      Condition=" '%(EventLogSource.Identity)'=='' "
      Importance="high"
      Text="- (None configured)" />
    <RegistryWrite
      Condition=" '%(EventLogSource.Identity)'!= '' "
      KeyName="HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\$(EventLogName)\%(EventLogSource.Identity)"
			ValueName="EventMessageFile"
			Value="$(systemdrive)\Windows\Microsoft.NET\Framework\v2.0.50727\EventLogMessages.dll" />
  </Target>

  <Target Name="AfterInitialiseBuildCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <ItemGroup>
    <DatabaseProject
      Include="..\**\*.dbproj" />
  </ItemGroup>

  <Target Name="BeforeDatabaseBuildCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreDatabaseBuild">
    <!-- Drop database(s) -->
    <Microsoft.Sdc.Tasks.Sql.Execute
      Condition=" '%(DatabaseProject.Identity)'!='' "
      ServerName="$(DatabaseServerName)"
      DatabaseName="master"
      Sql="IF EXISTS (SELECT * FROM master..sysdatabases WHERE name = N'%(DatabaseProject.Filename)') BEGIN DROP DATABASE [%(DatabaseProject.Filename)] END"
      CommandTimeout="30" />
    <!-- Create database(s) -->
    <MSBuild
      Condition=" '%(DatabaseProject.Identity)'!='' "
      Projects="%(DatabaseProject.FullPath)"
      Targets="Rebuild;Deploy" />
  </Target>

  <Target Name="AfterDatabaseBuildCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreSolutionCompileConfiguration">
    <MSBuild
      Condition=" '$(IsDesktopBuild)'=='true' "
      Projects="$(Solution)"
      Properties="Configuration=%(ConfigurationToBuild.FlavorToBuild);OutputPath=$(BuildDir)\%(ConfigurationToBuild.FlavorToBuild);$(Properties);$(CustomPropertiesForBuild)"
      Targets="$(Targets)" />
    <MSBuild
      Condition=" '$(IsDesktopBuild)'!='true' "
      Projects="$(Solution)"
      Properties="Configuration=%(ConfigurationToBuild.FlavorToBuild);OutputPath=$(BuildDir)\%(ConfigurationToBuild.FlavorToBuild);$(Properties);$(CustomPropertiesForBuild);DelaySign=false;AssemblyOriginatorKeyFile=$(StrongNameKeyPairPath)"
      Targets="$(Targets)" />
  </Target>

  <Target Name="BeforeSolutionCompileCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreSolutionCompile">
    <Message
      Importance="high"
      Text="Compiling solution." />
    <MSBuild
      Projects="$(MSBuildProjectFile)"
      Properties="Solution=%(SolutionToBuild.Identity);BuildDir=$(BuildDir);Properties=%(SolutionToBuild.Properties);Targets=%(SolutionToBuild.Targets);"
      Targets="CoreSolutionCompileConfiguration" />
  </Target>

  <Target Name="AfterSolutionCompileCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <!-- BizTalk Properties and Targets - Start -->

  <Import Project="$(MSBuildExtensionsPath)\StealFocus\MSBuild\v1.0\StealFocus.MSBuild.Tasks.BizTalk2009.Targets" />

  <PropertyGroup>
    <StopBizTalkApplicationDependsOn>
      StopBizTalkApplicationMessage;
      BeforeStopBizTalkApplicationCustom;
      CoreStopBizTalkApplication;
      AfterStopBizTalkApplicationCustom
    </StopBizTalkApplicationDependsOn>
    <RemoveBizTalkApplicationAssembliesFromGacDependsOn>
      RemoveBizTalkApplicationAssembliesFromGacMessage;
      BeforeRemoveBizTalkApplicationAssembliesFromGacCustom;
      CoreRemoveBizTalkApplicationAssembliesFromGac;
      AfterRemoveBizTalkApplicationAssembliesFromGacCustom
    </RemoveBizTalkApplicationAssembliesFromGacDependsOn>
    <RemoveBizTalkApplicationDependsOn>
      RemoveBizTalkApplicationMessage;
      BeforeRemoveBizTalkApplicationCustom;
      CoreRemoveBizTalkApplication;
      AfterRemoveBizTalkApplicationCustom
    </RemoveBizTalkApplicationDependsOn>
    <DeleteBizTalkHandlersDependsOn>
      DeleteBizTalkHandlersMessage;
      BeforeDeleteBizTalkHandlersCustom;
      CoreDeleteBizTalkHandlers;
      AfterDeleteBizTalkHandlersCustom
    </DeleteBizTalkHandlersDependsOn>
    <DeleteBizTalkHostsDependsOn>
      DeleteBizTalkHostsMessage;
      BeforeDeleteBizTalkHostsCustom;
      CoreDeleteBizTalkHosts;
      AfterDeleteBizTalkHostsCustom
    </DeleteBizTalkHostsDependsOn>
    <CreateBizTalkHostsDependsOn>
      CreateBizTalkHostsMessage;
      BeforeCreateBizTalkHostsCustom;
      CoreCreateBizTalkHosts;
      AfterCreateBizTalkHostsCustom
    </CreateBizTalkHostsDependsOn>
    <CreateBizTalkHandlersDependsOn>
      CreateBizTalkHandlersMessage;
      BeforeCreateBizTalkHandlersCustom;
      CoreCreateBizTalkHandlers;
      AfterCreateBizTalkHandlersCustom
    </CreateBizTalkHandlersDependsOn>
    <CreateBizTalkApplicationDependsOn>
      CreateBizTalkApplicationMessage;
      BeforeCreateBizTalkApplicationCustom;
      CoreCreateBizTalkApplication;
      AfterCreateBizTalkApplicationCustom
    </CreateBizTalkApplicationDependsOn>
    <ExportBizTalkApplicationDependsOn>
      ExportBizTalkApplicationMessage;
      BeforeExportBizTalkApplicationCustom;
      CoreExportBizTalkApplication;
      AfterExportBizTalkApplicationCustom
    </ExportBizTalkApplicationDependsOn>
    <ImportBindingsForBizTalkApplicationDependsOn>
      ImportBindingsForBizTalkApplicationMessage;
      BeforeImportBindingsForBizTalkApplicationCustom;
      CoreImportBindingsForBizTalkApplication;
      AfterImportBindingsForBizTalkApplicationCustom;
    </ImportBindingsForBizTalkApplicationDependsOn>
    <StartBizTalkApplicationDependsOn>
      StartBizTalkApplicationMessage;
      BeforeStartBizTalkApplicationCustom;
      CoreStartBizTalkApplication;
      AfterStartBizTalkApplicationCustom
    </StartBizTalkApplicationDependsOn>
    <BuildBizTalkApplicationDependsOn>
      StopBizTalkApplication;
      RemoveBizTalkApplicationAssembliesFromGac;
      RemoveBizTalkApplication;
      DeleteBizTalkHandlers;
      DeleteBizTalkHosts;
      CreateBizTalkHosts;
      CreateBizTalkHandlers;
      CreateBizTalkApplication;
      ExportBizTalkApplication;
      ImportBindingsForBizTalkApplication;
      StartBizTalkApplication
    </BuildBizTalkApplicationDependsOn>
  </PropertyGroup>

  <Target Name="ValidateBizTalkAdapters">
    <Error
      Condition=" '%(Adapter.Identity)'=='' "
      Text="Please populate a 'Adapter' MSBuild Item Group." />
  </Target>
  
  <Target Name="ValidateBizTalkApplicationName">
    <Error
      Condition=" '$(BizTalkApplicationName)'=='' "
      Text="Please provide a 'BizTalkApplicationName' MSBuild property." />
  </Target>

  <Target Name="ValidateBizTalkBindingLog">
    <Error
      Condition=" '$(BizTalkBindingLog)'=='' "
      Text="Please provide a 'BizTalkBindingLog' MSBuild property." />
  </Target>

  <Target Name="ValidateBizTalkConfigDatabaseName">
    <Error
      Condition=" '$(BizTalkConfigDatabaseName)'=='' "
      Text="Please provide a 'BizTalkConfigDatabaseName' MSBuild property." />
  </Target>

  <Target Name="ValidateBizTalkDatabaseServerName">
    <Error
      Condition=" '$(BizTalkDatabaseServerName)'=='' "
      Text="Please provide a 'BizTalkDatabaseServerName' MSBuild property." />
  </Target>

  <Target Name="ValidateBizTalkDevelopmentTargetEnvironmentName">
    <Error
      Condition=" '$(BizTalkDevelopmentTargetEnvironmentName)'=='' "
      Text="Please provide a 'BizTalkDevelopmentTargetEnvironmentName' MSBuild property." />
  </Target>

  <Target Name="ValidateBizTalkGacFilters">
    <Error
      Condition=" '$(BizTalkGacAssemblyNameFilter)'=='' "
      Text="Please provide a 'BizTalkGacAssemblyNameFilter' MSBuild property." />
    <Error
      Condition=" '$(BizTalkGacLocaleFilter)'=='' "
      Text="Please provide a 'BizTalkGacLocaleFilter' MSBuild property." />
    <Error
      Condition=" '$(BizTalkGacPublicKeyTokenFilter)'=='' "
      Text="Please provide a 'BizTalkGacPublicKeyTokenFilter' MSBuild property." />
    <Error
      Condition=" '$(BizTalkGacVersionFilter)'=='' "
      Text="Please provide a 'BizTalkGacVersionFilter' MSBuild property." />
  </Target>

  <Target Name="ValidateBizTalkHostWindowsGroupName">
    <Error
      Condition=" '$(BizTalkHostWindowsGroupName)'=='' "
      Text="Please provide a 'BizTalkHostWindowsGroupName' MSBuild property." />
  </Target>

  <Target Name="ValidateBizTalkInstallDirectory">
    <Error
      Condition=" '$(BizTalkInstallDirectory)'=='' "
      Text="Please provide a 'BizTalkInstallDirectory' MSBuild property." />
  </Target>

  <Target Name="ValidateBizTalkInstallerPackageOutputPath">
    <Error
      Condition=" '$(BizTalkInstallerPackageOutputPath)'=='' "
      Text="Please provide a 'BizTalkInstallerPackageOutputPath' MSBuild property." />
  </Target>

  <Target Name="ValidateBizTalkManagementDatabaseConnectionString">
    <Error
      Condition=" '$(BizTalkManagementDatabaseConnectionString)'=='' "
      Text="Please provide a 'BizTalkManagementDatabaseConnectionString' MSBuild property." />
  </Target>

  <Target Name="ValidateBizTalkHosts">
    <Error
      Condition=" '%(BizTalkHost.Identity)'=='' "
      Text="Please populate a 'BizTalkHost' MSBuild Item Group with metadata 'Username', 'Password', 'HostTracking', 'HostType', 'IsDefault' and 'Trusted'." />
  </Target>

  <Target Name="ValidateBizTalkServerName">
    <Error
      Condition=" '$()'=='BizTalkServerName' "
      Text="Please provide a 'BizTalkServerName' MSBuild property." />
  </Target>

  <Target Name="StopBizTalkApplicationMessage">
    <Message 
      Importance="high" 
      Text="Stopping BizTalk Application '$(BizTalkApplicationName)'." />
  </Target>

  <Target Name="BeforeStopBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreStopBizTalkApplication" DependsOnTargets="ValidateBizTalkApplicationName;ValidateBizTalkManagementDatabaseConnectionString">
    <Bts2009StopApplication
      ApplicationName="$(BizTalkApplicationName)"
      ManagementDatabaseConnectionString="$(BizTalkManagementDatabaseConnectionString)"
      TerminateOrchestrations="true" />
  </Target>

  <Target Name="AfterStopBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="StopBizTalkApplication" DependsOnTargets="$(StopBizTalkApplicationDependsOn)" />

  <Target Name="RemoveBizTalkApplicationAssembliesFromGacMessage">
    <Message 
      Importance="high" 
      Text="Removing Solution's BizTalk Assemblies from the Global Assembly Cache (GAC)." />
  </Target>

  <Target Name="BeforeRemoveBizTalkApplicationAssembliesFromGacCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreRemoveBizTalkApplicationAssembliesFromGac" DependsOnTargets="ValidateBizTalkGacFilters">
    <Message
      Importance="high"
      Text="Deleting assemblies from the GAC matching '$(BizTalkGacAssemblyNameFilter), Version=$(BizTalkGacVersionFilter), Culture=$(BizTalkGacLocaleFilter), PublicKeyToken=$(BizTalkGacPublicKeyTokenFilter)'." />
    <GacUninstall
      AssemblyName="$(BizTalkGacAssemblyNameFilter)"
      Locale="$(BizTalkGacLocaleFilter)"
      PublicKeyToken="$(BizTalkGacPublicKeyTokenFilter)"
      Version="$(BizTalkGacVersionFilter)"
      FrameworkVersion="$(FrameworkVersion)" />
  </Target>

  <Target Name="AfterRemoveBizTalkApplicationAssembliesFromGacCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="RemoveBizTalkApplicationAssembliesFromGac" DependsOnTargets="$(RemoveBizTalkApplicationAssembliesFromGacDependsOn)" />

  <Target Name="RemoveBizTalkApplicationMessage">
    <Message 
      Importance="high" 
      Text="Removing BizTalk Application '$(BizTalkApplicationName)'." />
  </Target>

  <Target Name="BeforeRemoveBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreRemoveBizTalkApplication" DependsOnTargets="ValidateBizTalkApplicationName;ValidateBizTalkManagementDatabaseConnectionString">
    <Bts2009RemoveApplication
      ApplicationName="$(BizTalkApplicationName)"
      ManagementDatabaseConnectionString="$(BizTalkManagementDatabaseConnectionString)" />
  </Target>

  <Target Name="AfterRemoveBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="RemoveBizTalkApplication" DependsOnTargets="$(RemoveBizTalkApplicationDependsOn)" />

  <Target Name="DeleteBizTalkHandlersMessage">
    <Message 
      Importance="high" 
      Text="Deleting BizTalk Send and Receive Handlers for '$(BizTalkApplicationName)'." />
  </Target>

  <Target Name="BeforeDeleteBizTalkHandlersCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreDeleteBizTalkHandlers" DependsOnTargets="ValidateBizTalkHosts">
    <Bts2009StopHost
      HostName="%(BizTalkHost.Identity)" />
    <Bts2009CleanHostQueue
      HostName="%(BizTalkHost.Identity)" />
    <Bts2009DeleteAllReceiveHandlers
      HostName="%(BizTalkHost.Identity)" />
    <Bts2009DeleteAllSendHandlers
      HostName="%(BizTalkHost.Identity)" />
  </Target>

  <Target Name="AfterDeleteBizTalkHandlersCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="DeleteBizTalkHandlers" DependsOnTargets="$(DeleteBizTalkHandlersDependsOn)" />
  
  <Target Name="DeleteBizTalkHostsMessage">
    <Message 
      Importance="high" 
      Text="Deleting BizTalk Hosts and Host Instances for '$(BizTalkApplicationName)'." />
  </Target>

  <Target Name="BeforeDeleteBizTalkHostsCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreDeleteBizTalkHosts" DependsOnTargets="ValidateBizTalkHosts">
    <Bts2009DeleteHost
      HostName="%(BizTalkHost.Identity)" />
    <Bts2009DeleteHost
      HostName="%(BizTalkHost.Identity)" />
    <Bts2009DeleteHost
      HostName="%(BizTalkHost.Identity)" />
  </Target>

  <Target Name="AfterDeleteBizTalkHostsCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="DeleteBizTalkHosts" DependsOnTargets="$(DeleteBizTalkHostsDependsOn)" />
  
  <Target Name="CreateBizTalkHostsMessage">
    <Message 
      Importance="high" 
      Text="Creating BizTalk Hosts and Host Instances for '$(BizTalkApplicationName)'." />
  </Target>

  <Target Name="BeforeCreateBizTalkHostsCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreCreateBizTalkHosts" DependsOnTargets="ValidateBizTalkHostWindowsGroupName;ValidateBizTalkHosts;ValidateBizTalkServerName">
    <Bts2009CreateHost
      HostName="%(BizTalkHost.Identity)"
      HostTracking="%(BizTalkHost.HostTracking)"
      HostType="%(BizTalkHost.HostType)"
      IsDefault="%(BizTalkHost.IsDefault)"
      Trusted="%(BizTalkHost.Trusted)"
      WindowsGroupName="$(BizTalkHostWindowsGroupName)" />
    <Bts2009CreateHostInstance
      HostName="%(BizTalkHost.Identity)"
      ServerName="$(BizTalkServerName)"
      Username="%(BizTalkHost.Username)"
      Password="%(BizTalkHost.Password)" />
  </Target>

  <Target Name="AfterCreateBizTalkHostsCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CreateBizTalkHosts" DependsOnTargets="$(CreateBizTalkHostsDependsOn)" />
  
  <Target Name="CreateBizTalkHandlersMessage">
    <Message 
      Importance="high" 
      Text="Creating BizTalk Handlers for '$(BizTalkApplicationName)'." />
  </Target>

  <Target Name="BeforeCreateBizTalkHandlersCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreCreateBizTalkHandlers" DependsOnTargets="ValidateBizTalkAdapters">
    <Bts2009CreateReceiveHandler
      Condition=" '%(Adapter.BizTalkReceiveHostName)'!='' "
      AdapterName="%(Adapter.BizTalkAdapterName)"
      HostName="%(Adapter.BizTalkReceiveHostName)" />
    <Bts2009CreateSendHandler
      Condition=" '%(Adapter.BizTalkSendHostName)'!='' "
      AdapterName="%(Adapter.BizTalkAdapterName)"
      HostName="%(Adapter.BizTalkSendHostName)" />
  </Target>

  <Target Name="AfterCreateBizTalkHandlersCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CreateBizTalkHandlers" DependsOnTargets="$(CreateBizTalkHandlersDependsOn)" />
  
  <Target Name="CreateBizTalkApplicationMessage">
    <Message 
      Importance="high" 
      Text="Creating BizTalk Application '$(BizTalkApplicationName)'." />
  </Target>

  <Target Name="BeforeCreateBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreCreateBizTalkApplication" DependsOnTargets="ValidateBizTalkApplicationName;ValidateBizTalkConfigDatabaseName;ValidateBizTalkDatabaseServerName;ValidateBizTalkInstallDirectory">
    <Message
      Importance="high"
      Text="Adding BizTalk Application '$(BizTalkApplicationName)'." />
    <Exec
      Command="BTSTask AddApp -ApplicationName:$(BizTalkApplicationName) -Description:$(BizTalkApplicationName) -Server:$(BizTalkDatabaseServerName) -Database:$(BizTalkConfigDatabaseName)" />
    <!-- Check Assembly paths. -->
    <Error
      Condition=" !Exists('%(BizTalkAssembly.FullPath)') "
      Text=" The '%(BizTalkAssembly.FullPath)' Assembly was not found. Was the given path valid?" />
    <!-- Check Bindings paths. -->
    <Error
      Condition=" !Exists('%(BindingsFile.FullPath)') "
      Text=" The '%(BindingsFile.TargetEnvironment)' Bindings file was not found. Was the given path valid?" />
    <!-- Update version number in Bindings files. -->
    <File.RegEx
      Condition=" '$(BuildLabelNumber)'!='$(DefaultBuildOrVersionNumber)' "
      Path="%(BindingsFile.FullPath)"
      RegularExpression="$(DefaultBuildOrVersionNumber)"
      NewValue="$(BuildLabelNumber)"
      Force="true" />
    <!-- Add Resources. -->
    <Message
      Importance="high"
      Text="Adding Binding files to BizTalk Application '$(BizTalkApplicationName)'." />
    <Exec
      Command='BTSTask AddResource /Source:"%(BindingsFile.FullPath)" /Property:TargetEnvironment="%(BindingsFile.TargetEnvironment)" /ApplicationName:"$(BizTalkApplicationName)" /Type:System.BizTalk:BizTalkBinding' />
    <Message
      Importance="high"
      Text="Adding Assemblies to BizTalk Application '$(BizTalkApplicationName)'." />
    <Exec
      Command='BTSTask AddResource /Source:"%(BizTalkAssembly.FullPath)" /ApplicationName:"$(BizTalkApplicationName)" /Type:%(BizTalkAssembly.Type) /Overwrite /Destination:"$(BizTalkInstallDirectory)\%(BizTalkAssembly.Filename).%(BizTalkAssembly.Extension)" /Options:%(BizTalkAssembly.InstallOptions)' />
  </Target>

  <Target Name="AfterCreateBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CreateBizTalkApplication" DependsOnTargets="$(CreateBizTalkApplicationDependsOn)" />

  <Target Name="ExportBizTalkApplicationMessage">
    <Message
      Importance="high"
      Text="Exporting BizTalk Application '$(BizTalkApplicationName)'." />
  </Target>

  <Target Name="BeforeExportBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreExportBizTalkApplication" DependsOnTargets="ValidateBizTalkApplicationName;ValidateBizTalkInstallerPackageOutputPath">
    <Exec
      Command='BTSTask ExportApp /ApplicationName:$(BizTalkApplicationName) /Package:$(BizTalkInstallerPackageOutputPath)' />
  </Target>

  <Target Name="AfterExportBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="ExportBizTalkApplication" DependsOnTargets="$(ExportBizTalkApplicationDependsOn)" />

  <Target Name="ImportBindingsForBizTalkApplicationMessage">
    <Message
      Importance="high"
      Text="Importing bindings for BizTalk Application '$(BizTalkApplicationName)'." />
  </Target>

  <Target Name="BeforeImportBindingsForBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreImportBindingsForBizTalkApplication" DependsOnTargets="ValidateBizTalkApplicationName;ValidateBizTalkBindingLog;ValidateBizTalkDevelopmentTargetEnvironmentName">
    <!-- Delete any old binding log and then Bind. -->
    <Delete
      Files="$(BizTalkBindingLog)" />
    <Message
      Importance="high"
      Text="Importing Bindings for '$(BizTalkDevelopmentTargetEnvironmentName)' environment to BizTalk Application '$(BizTalkApplicationName)'." />
    <Exec
      Condition=" '%(BindingsFile.TargetEnvironment)'=='$(BizTalkDevelopmentTargetEnvironmentName)' "
      Command='BTSTask ImportBindings -Source:"%(BindingsFile.FullPath)" -ApplicationName:$(BizTalkApplicationName) > $(BizTalkBindingLog)' />
  </Target>

  <Target Name="AfterImportBindingsForBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="ImportBindingsForBizTalkApplication" DependsOnTargets="$(ImportBindingsForBizTalkApplicationDependsOn)" />

  <Target Name="StartBizTalkApplicationMessage">
    <Message 
      Importance="high" 
      Text="Starting BizTalk Application '$(BizTalkApplicationName)'." />
  </Target>

  <Target Name="BeforeStartBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreStartBizTalkApplication" DependsOnTargets="ValidateBizTalkApplicationName;ValidateBizTalkManagementDatabaseConnectionString">
    <Message
      Importance="high"
      Text="Starting all BizTalk Send Ports for '$(BizTalkApplicationName)'." />
    <Bts2009StartAllSendPorts
      ApplicationName="$(BizTalkApplicationName)"
      ManagementDatabaseConnectionString="$(BizTalkManagementDatabaseConnectionString)" />
    <Message
      Importance="high"
      Text="Starting all BizTalk Receive Locations for '$(BizTalkApplicationName)'." />
    <Bts2009EnableAllReceiveLocations
      ApplicationName="$(BizTalkApplicationName)"
			ManagementDatabaseConnectionString="$(BizTalkManagementDatabaseConnectionString)" />
    <Message
      Importance="high"
      Text="Starting all BizTalk Orchestrations for '$(BizTalkApplicationName)'." />
    <Bts2009StartAllOrchestrations
      ApplicationName="$(BizTalkApplicationName)"
			ManagementDatabaseConnectionString="$(BizTalkManagementDatabaseConnectionString)" />
    <Message
      Importance="high"
      Text="Starting all BizTalk Hosts for '$(BizTalkApplicationName)'." />
    <Bts2009StartHost
      HostName="%(BizTalkHost.Identity)" />
  </Target>

  <Target Name="AfterStartBizTalkApplicationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="StartBizTalkApplication" DependsOnTargets="$(StartBizTalkApplicationDependsOn)" />

  <Target Name="BuildBizTalkApplication" DependsOnTargets="$(BuildBizTalkApplicationDependsOn)" />

  <!-- BizTalk Properties and Targets - End -->
  
  <PropertyGroup>
    <RunTestsForConfigurationDependsOn>
      BeforeRunTestsForConfigurationCustom;
      BeforeRunTestsForConfiguration;
      CoreRunTestsForConfiguration;
      AfterRunTestsForConfigurationCustom
    </RunTestsForConfigurationDependsOn>
  </PropertyGroup>
  
  <Target Name="BeforeRunTestsForConfigurationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="BeforeRunTestsForConfiguration">
    <!-- Notify user that we will skip the deployment of the current configuration to BizTalk. -->
    <Message 
      Condition=" '$(BizTalkApplicationName)'!='' And '%(ConfigurationToBuild.FlavorToBuild)'=='$(Configuration)' And '%(ConfigurationToBuild.DeployToBizTalkApplicationForTestRun)'!='true' "
      Importance="high" 
      Text="Skipping the deployment of '$(Configuration)' configuration to BizTalk." />
    <!-- Notify user that we will deploy the current configuration to BizTalk and initialise the Hosts/Handlers. -->
    <Message
      Condition=" '$(BizTalkApplicationName)'!='' And '%(ConfigurationToBuild.FlavorToBuild)'=='$(Configuration)' And '%(ConfigurationToBuild.DeployToBizTalkApplicationForTestRun)'=='true' And '%(ConfigurationToBuild.InitialiseBizTalkHostsAndHandlers)'=='true' "
      Importance="high"
      Text="Deploying '$(Configuration)' configuration to BizTalk (initialising Hosts and Handlers)." />
    <MSBuild
      Condition=" '$(BizTalkApplicationName)'!='' And '%(ConfigurationToBuild.FlavorToBuild)'=='$(Configuration)' And '%(ConfigurationToBuild.DeployToBizTalkApplicationForTestRun)'=='true' And '%(ConfigurationToBuild.InitialiseBizTalkHostsAndHandlers)'=='true' "
      Projects="$(MSBuildProjectFullPath)"
      Targets="BuildBizTalkApplication"
      Properties="SolutionConfigurationToDeploy=$(Configuration)" />
    <!-- Notify user that we will deploy the current configuration to BizTalk but not initialise the Hosts/Handlers. -->
    <Message
      Condition=" '$(BizTalkApplicationName)'!='' And '%(ConfigurationToBuild.FlavorToBuild)'=='$(Configuration)' And '%(ConfigurationToBuild.DeployToBizTalkApplicationForTestRun)'=='true' And '%(ConfigurationToBuild.InitialiseBizTalkHostsAndHandlers)'!='true' "
      Importance="high"
      Text="Deploying '$(Configuration)' configuration to BizTalk (not initialising Hosts and Handlers)." />
    <MSBuild
      Condition=" '$(BizTalkApplicationName)'!='' And '%(ConfigurationToBuild.FlavorToBuild)'=='$(Configuration)' And '%(ConfigurationToBuild.DeployToBizTalkApplicationForTestRun)'=='true' And '%(ConfigurationToBuild.InitialiseBizTalkHostsAndHandlers)'!='true' "
      Projects="$(MSBuildProjectFullPath)"
      Targets="StopBizTalkApplication;RemoveBizTalkApplicationAssembliesFromGac;RemoveBizTalkApplication;CreateBizTalkApplication;StartBizTalkApplication;ExportBizTalkApplication"
      Properties="SolutionConfigurationToDeploy=$(Configuration)" />
  </Target>
  
  <Target Name="CoreRunTestsForConfiguration">
    <Message
      Importance="high"
      Text="Running tests for configuration '$(Configuration)'." />
    <!-- "ToolsVersion" property applied to "FrameworkVersion" attribute intentionally. -->
    <StealFocus.MSBuild.Tasks.MSTest
      BinariesRootPath="$(BuildDir)"
      FlavorToBuild="$(Configuration)"
      FrameworkVersion="$(FrameworkVersion)"
      TestContainerSearchFilters="$(MSTestTestContainerSearchFilters)"
      TestRunConfigFilePath="$(MSTestTestRunConfigFilePath)"
      WorkingDirectory="..\" />
  </Target>

  <Target Name="AfterRunTestsForConfigurationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="RunTestsForConfiguration" DependsOnTargets="$(RunTestsForConfigurationDependsOn)" />

  <Target Name="BeforeRunTestsCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreRunTests">
    <Message
      Importance="high"
      Text="Running tests." />
    <MSBuild
      Projects="$(MSBuildProjectFile)"
      Targets="RunTestsForConfiguration"
      Properties="BuildDir=$(BuildDir);Configuration=%(ConfigurationToBuild.FlavorToBuild);FrameworkVersion=$(FrameworkVersion);MSTestTestContainerSearchFilters=$(MSTestTestContainerSearchFilters);MSTestTestRunConfigFilePath=$(MSTestTestRunConfigFilePath)" />
  </Target>

  <Target Name="AfterRunTestsCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="BeforeBuildDocumentationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreBuildDocumentation" Condition=" '$(IsDocumentationBuild)'=='true' ">
    <Message
      Importance="high"
      Text="Building documentation." />
    <MSBuild
      Projects="$(DocumentationProjectFile)"
      Properties="OutDir=$(BuildDir)\$(ConfigurationForDocumentationBuild);OutputPath=$(BuildDir)\Documentation" />
    <!-- 
      TO DO: Does "HelpFileVersion" do anything if supplied? 
      Properties="Configuration=Release;Platform=AnyCPU;OutDir=$(BinariesRoot)\Release;HelpFileVersion=$(BuildLabelNumberComponent);"
    -->
  </Target>

  <Target Name="AfterBuildDocumentationCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CorePackageEnvironment">
    <!-- 
      "Development" configuration built during main Solution build so skip here.
      "Clean" target called to guarantee MSI is re-generated to ensure the configuration files for the correct environment are packaged inside.
    -->
    <MSBuild
      Condition=" '%(Environments.Identity)'!='Development' And '$(IsDesktopBuild)'=='true' And '%(Environments.IsIncludedInDesktopBuild)'=='true' "
      Projects="$(SetupProjectFile)"
      Properties="Configuration=$(Configuration);OutputPath=$(BuildDir)\$(Configuration);$(Properties);$(CustomPropertiesForBuild);Environment=%(Environments.Identity);IsSetupBuild=true" 
      Targets="Clean;Build" />
    <MSBuild
      Condition=" '%(Environments.Identity)'!='Development' And '$(IsDesktopBuild)'!='true' "
      Projects="$(SetupProjectFile)"
      Properties="Configuration=$(Configuration);OutputPath=$(BuildDir)\$(Configuration);$(Properties);$(CustomPropertiesForBuild);Environment=%(Environments.Identity);IsSetupBuild=true;DelaySign=false;AssemblyOriginatorKeyFile=$(StrongNameKeyPairPath)"
      Targets="Clean;Build" />
  </Target>

  <Target Name="CorePackageConfiguration">
    <MSBuild 
      Projects="$(MSBuildProjectFile)"
      Targets="CorePackageEnvironment"
      Properties="SetupProjectFile=$(SetupProjectFile);Configuration=%(ConfigurationToBuild.FlavorToBuild)" />
  </Target>

  <Target Name="BeforePackageCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CorePackage" Condition=" '$(IsPackagedBuild)'=='true' ">
    <Message 
      Importance="high" 
      Text="Creating packages." />
    <!-- Build WiX projects for all environments. -->
    <ItemGroup>
      <SetupProjectFiles Include="$(MSBuildProjectDirectory)\..\**\*.wixproj" />
    </ItemGroup>
    <MSBuild
      Projects="$(MSBuildProjectFile)"
      Targets="CorePackageConfiguration"
      Properties="SetupProjectFile=%(SetupProjectFiles.FullPath);BinFolder=%(SetupProjectFiles.Directory)bin;ObjFolder=%(SetupProjectFiles.Directory)obj" />
    <!-- If 'DropLocationForBuild' not set, warn user. -->
    <Warning 
      Condition=" '$(IsDesktopBuild)'!='true' And '$(DropLocationForBuild)'=='' " 
      Text="The 'DropLocationForBuild' MSBuild variable was not set so build artefacts will not be copied to a drop location." />
    <!-- Copy BuildDir to drop location. -->
    <ItemGroup>
      <BuildDirFilesToCopy Include="$(BuildDir)\**\*.*" />
    </ItemGroup>
    <Copy
      Condition=" '$(IsDesktopBuild)'!='true' And '$(DropLocationForBuild)'!='' "
      SourceFiles="@(BuildDirFilesToCopy)"
      DestinationFiles="@(BuildDirFilesToCopy->'$(DropLocationForBuild)\%(RecursiveDir)%(Filename)%(Extension)')" />
    <!-- Copy TestResults to drop location. -->
    <ItemGroup>
      <TestResultsFilesToCopy Include="..\TestResults\**\*.*" />
    </ItemGroup>
    <Copy
      Condition=" '$(IsDesktopBuild)'!='true' And '$(DropLocationForBuild)'!='' "
      SourceFiles="@(TestResultsFilesToCopy)"
      DestinationFiles="@(TestResultsFilesToCopy->'$(DropLocationForBuild)\TestResults\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

  <Target Name="AfterPackageCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="BeforeDeployCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="CoreDeploy" />

  <Target Name="AfterDeployCustom">
    <!-- To be overridden in inheriting script. -->
  </Target>

  <Target Name="SolutionBuild" DependsOnTargets="$(SolutionBuildDependsOn)" />

  <Target Name="CleanSolutionConfiguration">
    <Message 
      Importance="high" 
      Text="Cleaning the following Solution configurations:" />
    <Message
      Importance="high"
      Text="- %(ConfigurationToBuild.FlavorToBuild)" />
    <MSBuild
      Projects="$(Solution)"
      Targets="Clean" 
      Properties="Configuration=%(ConfigurationToBuild.FlavorToBuild)" />
  </Target>
  
  <Target Name="CleanSolution">
    <MSBuild 
      Projects="$(MSBuildProjectFile)" 
      Targets="CleanSolutionConfiguration" 
      Properties="Solution=%(SolutionToBuild.Identity);IsAllConfigurationsBuild=true" />
    <ItemGroup>
      <!-- App.config files are not typically generated, all others are. -->
      <ItemsToDelete 
        Include="..\*\*.config" 
        Exclude="..\*\App.config" />
      <ItemsToDelete
        Include="..\*\*.cache" />
      <ItemsToDelete
        Include="..\*\bin\**" />
      <ItemsToDelete
        Include="..\*\obj\**" />
    </ItemGroup>
    <Message
      Importance="high" 
      Text="Deleting generated configuration files." />
    <Delete Files="@(ItemsToDelete)" />
  </Target>

</Project>